// Code generated by rimworld-editor. DO NOT EDIT.

package stats

import (
	"github.com/cruffinoni/rimworld-editor/xml"
	"github.com/cruffinoni/rimworld-editor/xml/attributes"
	"github.com/cruffinoni/rimworld-editor/xml/types"
)

type StatDef struct {
	Attr           attributes.Attributes
	FieldValidated map[string]bool

	DefName                      string                          `xml:"defName"`
	Label                        string                          `xml:"label"`
	Category                     string                          `xml:"category"`
	DefaultBaseValue             float64                         `xml:"defaultBaseValue"`
	MinValue                     float64                         `xml:"minValue"`
	AlwaysHide                   bool                            `xml:"alwaysHide"`
	DisplayPriorityInCategory    int64                           `xml:"displayPriorityInCategory"`
	HideAtValue                  int64                           `xml:"hideAtValue"`
	MaxValue                     float64                         `xml:"maxValue"`
	ToStringStyle                string                          `xml:"toStringStyle"`
	Parts                        *types.Slice[*Parts]            `xml:"parts"`
	LabelForFullStatList         string                          `xml:"labelForFullStatList"`
	Description                  string                          `xml:"description"`
	ShowOnPawns                  bool                            `xml:"showOnPawns"`
	Cacheable                    bool                            `xml:"cacheable"`
	ShowIfUndefined              bool                            `xml:"showIfUndefined"`
	FormatString                 string                          `xml:"formatString"`
	FormatStringUnfinalized      string                          `xml:"formatStringUnfinalized"`
	WorkerClass                  string                          `xml:"workerClass"`
	ShowIfModsLoadedAny          *types.Slice[string]            `xml:"showIfModsLoadedAny"`
	ShowZeroBaseValue            bool                            `xml:"showZeroBaseValue"`
	ShowOnAnimals                bool                            `xml:"showOnAnimals"`
	ValueIfMissing               float64                         `xml:"valueIfMissing"`
	ScenarioRandomizable         bool                            `xml:"scenarioRandomizable"`
	RoundToFiveOver              int64                           `xml:"roundToFiveOver"`
	ShowOnNonWorkTables          bool                            `xml:"showOnNonWorkTables"`
	StatFactors                  *types.Slice[string]            `xml:"statFactors"`
	PostProcessCurve             *PostProcessCurve               `xml:"postProcessCurve"`
	NeverDisabled                bool                            `xml:"neverDisabled"`
	SkillNeedFactors             *types.Slice[*SkillNeedFactors] `xml:"skillNeedFactors"`
	CapacityFactors              *types.Slice[*CapacityFactors]  `xml:"capacityFactors"`
	ShowOnDefaultValue           bool                            `xml:"showOnDefaultValue"`
	ShowOnMechanoids             bool                            `xml:"showOnMechanoids"`
	ShowIfModsLoaded             *types.Slice[string]            `xml:"showIfModsLoaded"`
	ApplyFactorsIfNegative       bool                            `xml:"applyFactorsIfNegative"`
	ShowNonAbstract              bool                            `xml:"showNonAbstract"`
	ShowOnUnhaulables            bool                            `xml:"showOnUnhaulables"`
	ShowOnUntradeables           bool                            `xml:"showOnUntradeables"`
	RoundValue                   bool                            `xml:"roundValue"`
	MinifiedThingInherits        bool                            `xml:"minifiedThingInherits"`
	ToStringStyleUnfinalized     string                          `xml:"toStringStyleUnfinalized"`
	SupressDisabledError         bool                            `xml:"supressDisabledError"`
	SkillNeedOffsets             *types.Slice[*SkillNeedOffsets] `xml:"skillNeedOffsets"`
	NoSkillOffset                int64                           `xml:"noSkillOffset"`
	DisableIfSkillDisabled       string                          `xml:"disableIfSkillDisabled"`
	PostProcessStatFactors       *types.Slice[string]            `xml:"postProcessStatFactors"`
	CapacityOffsets              *types.Slice[*CapacityOffsets]  `xml:"capacityOffsets"`
	FinalizeEquippedStatOffset   bool                            `xml:"finalizeEquippedStatOffset"`
	ShowDevelopmentalStageFilter string                          `xml:"showDevelopmentalStageFilter"`
	ForInformationOnly           bool                            `xml:"forInformationOnly"`
	ShowOnPawnKind               *types.Slice[string]            `xml:"showOnPawnKind"`
	ShowOnPlayerMechanoids       bool                            `xml:"showOnPlayerMechanoids"`
	ShowIfHediffsPresent         *types.Slice[string]            `xml:"showIfHediffsPresent"`
	ShowOnNonWildManHumanlikes   bool                            `xml:"showOnNonWildManHumanlikes"`
	DisplayAllByDefault          bool                            `xml:"displayAllByDefault"`
	DisplayOrder                 int64                           `xml:"displayOrder"`
}

func (s *StatDef) Assign(*xml.Element) error {
	return nil
}

func (s *StatDef) CountValidatedField() int {
	if s.FieldValidated == nil {
		return 0
	}
	return len(s.FieldValidated)
}

func (s *StatDef) Equal(*StatDef) bool {
	return false
}

func (s *StatDef) GetAttributes() attributes.Attributes {
	return s.Attr
}

func (s *StatDef) GetPath() string {
	return ""
}

func (s *StatDef) Greater(*StatDef) bool {
	return false
}

func (s *StatDef) IsValidField(field string) bool {
	return s.FieldValidated[field]
}

func (s *StatDef) Less(*StatDef) bool {
	return false
}

func (s *StatDef) SetAttributes(attr attributes.Attributes) {
	s.Attr = attr
	return
}

func (s *StatDef) Val() *StatDef {
	return nil
}

func (s *StatDef) ValidateField(field string) {
	if s.FieldValidated == nil {
		s.FieldValidated = make(map[string]bool)
	}
	s.FieldValidated[field] = true
	return
}
