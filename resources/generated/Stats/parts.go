// Code generated by rimworld-editor. DO NOT EDIT.

package stats

import (
	"github.com/cruffinoni/rimworld-editor/xml"
	"github.com/cruffinoni/rimworld-editor/xml/attributes"
	"github.com/cruffinoni/rimworld-editor/xml/types"
	"github.com/cruffinoni/rimworld-editor/xml/types/primary"
)

type Parts struct {
	Attr           attributes.Attributes
	FieldValidated map[string]bool

	FactorAwful              float64                      `xml:"factorAwful"`
	FactorPoor               float64                      `xml:"factorPoor"`
	FactorNormal             float64                      `xml:"factorNormal"`
	FactorGood               float64                      `xml:"factorGood"`
	FactorExcellent          float64                      `xml:"factorExcellent"`
	FactorMasterwork         float64                      `xml:"factorMasterwork"`
	FactorLegendary          float64                      `xml:"factorLegendary"`
	Priority                 int64                        `xml:"priority"`
	StuffPowerStat           string                       `xml:"stuffPowerStat"`
	MultiplierStat           string                       `xml:"multiplierStat"`
	ApplyToNegativeValues    bool                         `xml:"applyToNegativeValues"`
	FactorOutdoors           float64                      `xml:"factorOutdoors"`
	FactorIndoors            float64                      `xml:"factorIndoors"`
	CustomLabel              string                       `xml:"customLabel"`
	FactorFromGlowCurve      *FactorFromGlowCurve         `xml:"factorFromGlowCurve"`
	RoomStat                 string                       `xml:"roomStat"`
	IgnoreIfPrefersDarkness  bool                         `xml:"ignoreIfPrefersDarkness"`
	IgnoreIfIncapableOfSight bool                         `xml:"ignoreIfIncapableOfSight"`
	Radius                   float64                      `xml:"radius"`
	Curve                    *Curve                       `xml:"curve"`
	UseBiologicalYears       bool                         `xml:"useBiologicalYears"`
	HumanlikeOnly            bool                         `xml:"humanlikeOnly"`
	Stat                     string                       `xml:"stat"`
	Label                    string                       `xml:"label"`
	Factor                   float64                      `xml:"factor"`
	Offset                   float64                      `xml:"offset"`
	FactorTired              float64                      `xml:"factorTired"`
	FactorExhausted          float64                      `xml:"factorExhausted"`
	Subtract                 bool                         `xml:"subtract"`
	FactorVeryTired          float64                      `xml:"factorVeryTired"`
	FactorStarving           float64                      `xml:"factorStarving"`
	FactorUrgentlyHungry     float64                      `xml:"factorUrgentlyHungry"`
	ApparelStat              string                       `xml:"apparelStat"`
	Li                       *types.Slice[*primary.Empty] `xml:"li"`
	MaxGainLegendary         int64                        `xml:"maxGainLegendary"`
	MaxGainExcellent         int64                        `xml:"maxGainExcellent"`
	MaxGainGood              int64                        `xml:"maxGainGood"`
	MaxGainMasterwork        int64                        `xml:"maxGainMasterwork"`
	FactorOffsetOutdoors     float64                      `xml:"factorOffsetOutdoors"`
	Multiplier               float64                      `xml:"multiplier"`
	ProtectedByEdificeFactor int64                        `xml:"protectedByEdificeFactor"`
	FactorOffsetUnroofed     float64                      `xml:"factorOffsetUnroofed"`
	IncludeWeapon            bool                         `xml:"includeWeapon"`
}

func (p *Parts) Assign(*xml.Element) error {
	return nil
}

func (p *Parts) CountValidatedField() int {
	if p.FieldValidated == nil {
		return 0
	}
	return len(p.FieldValidated)
}

func (p *Parts) Equal(*Parts) bool {
	return false
}

func (p *Parts) GetAttributes() attributes.Attributes {
	return p.Attr
}

func (p *Parts) GetPath() string {
	return ""
}

func (p *Parts) Greater(*Parts) bool {
	return false
}

func (p *Parts) IsValidField(field string) bool {
	return p.FieldValidated[field]
}

func (p *Parts) Less(*Parts) bool {
	return false
}

func (p *Parts) SetAttributes(attr attributes.Attributes) {
	p.Attr = attr
	return
}

func (p *Parts) Val() *Parts {
	return nil
}

func (p *Parts) ValidateField(field string) {
	if p.FieldValidated == nil {
		p.FieldValidated = make(map[string]bool)
	}
	p.FieldValidated[field] = true
	return
}
