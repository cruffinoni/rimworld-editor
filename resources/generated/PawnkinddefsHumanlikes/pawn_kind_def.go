// Code generated by rimworld-editor. DO NOT EDIT.

package pawnkinddefs_humanlikes

import (
	"github.com/cruffinoni/rimworld-editor/xml"
	"github.com/cruffinoni/rimworld-editor/xml/attributes"
	"github.com/cruffinoni/rimworld-editor/xml/types"
	"github.com/cruffinoni/rimworld-editor/xml/types/embedded"
)

type PawnKindDef struct {
	Attr           attributes.Attributes
	FieldValidated map[string]bool

	Race                            string                                  `xml:"race"`
	DefaultFactionType              string                                  `xml:"defaultFactionType"`
	ChemicalAddictionChance         float64                                 `xml:"chemicalAddictionChance"`
	InvNutrition                    float64                                 `xml:"invNutrition"`
	ItemQuality                     string                                  `xml:"itemQuality"`
	BackstoryCryptosleepCommonality float64                                 `xml:"backstoryCryptosleepCommonality"`
	MaxGenerationAge                int64                                   `xml:"maxGenerationAge"`
	CombatEnhancingDrugsChance      float64                                 `xml:"combatEnhancingDrugsChance"`
	CombatEnhancingDrugsCount       string                                  `xml:"combatEnhancingDrugsCount"`
	BiocodeWeaponChance             float64                                 `xml:"biocodeWeaponChance"`
	GearHealthRange                 string                                  `xml:"gearHealthRange"`
	InitialWillRange                string                                  `xml:"initialWillRange"`
	ApparelTags                     *types.Slice[string]                    `xml:"apparelTags"`
	ApparelMoney                    string                                  `xml:"apparelMoney"`
	ApparelAllowHeadgearChance      float64                                 `xml:"apparelAllowHeadgearChance"`
	WeaponMoney                     string                                  `xml:"weaponMoney"`
	TechHediffsChance               float64                                 `xml:"techHediffsChance"`
	TechHediffsMoney                string                                  `xml:"techHediffsMoney"`
	TechHediffsTags                 *types.Slice[string]                    `xml:"techHediffsTags"`
	DisallowedTraits                *types.Slice[string]                    `xml:"disallowedTraits"`
	InventoryOptions                *InventoryOptions                       `xml:"inventoryOptions"`
	DefName                         string                                  `xml:"defName"`
	Label                           string                                  `xml:"label"`
	CombatPower                     int64                                   `xml:"combatPower"`
	CanBeSapper                     bool                                    `xml:"canBeSapper"`
	IsGoodBreacher                  bool                                    `xml:"isGoodBreacher"`
	WeaponTags                      *types.Slice[string]                    `xml:"weaponTags"`
	InitialResistanceRange          string                                  `xml:"initialResistanceRange"`
	Skills                          *types.Slice[*Skills]                   `xml:"skills"`
	TechHediffsRequired             *types.Slice[string]                    `xml:"techHediffsRequired"`
	ApparelRequired                 *types.Slice[string]                    `xml:"apparelRequired"`
	LabelPlural                     string                                  `xml:"labelPlural"`
	FactionLeader                   bool                                    `xml:"factionLeader"`
	XenotypeSet                     *XenotypeSet                            `xml:"xenotypeSet"`
	IsFighter                       bool                                    `xml:"isFighter"`
	MinGenerationAge                int64                                   `xml:"minGenerationAge"`
	Trader                          bool                                    `xml:"trader"`
	ForceNormalGearQuality          bool                                    `xml:"forceNormalGearQuality"`
	TechHediffsDisallowTags         *types.Slice[string]                    `xml:"techHediffsDisallowTags"`
	ApparelIgnoreSeasons            bool                                    `xml:"apparelIgnoreSeasons"`
	ApparelIgnorePollution          *embedded.Type[bool]                    `xml:"apparelIgnorePollution"`
	HumanPregnancyChance            float64                                 `xml:"humanPregnancyChance"`
	RequiredWorkTags                *types.Slice[string]                    `xml:"requiredWorkTags"`
	BackstoryFilters                *types.Slice[*BackstoryFilters]         `xml:"backstoryFilters"`
	ApparelColor                    string                                  `xml:"apparelColor"`
	FavoriteColor                   string                                  `xml:"favoriteColor"`
	AcceptArrestChanceFactor        float64                                 `xml:"acceptArrestChanceFactor"`
	BackstoryFiltersOverride        *types.Slice[*BackstoryFiltersOverride] `xml:"backstoryFiltersOverride"`
	InvFoodDef                      string                                  `xml:"invFoodDef"`
	LabelMale                       string                                  `xml:"labelMale"`
	LabelFemalePlural               string                                  `xml:"labelFemalePlural"`
	IgnoreIdeoApparelColors         bool                                    `xml:"ignoreIdeoApparelColors"`
	LabelFemale                     string                                  `xml:"labelFemale"`
}

func (p *PawnKindDef) Assign(*xml.Element) error {
	return nil
}

func (p *PawnKindDef) CountValidatedField() int {
	if p.FieldValidated == nil {
		return 0
	}
	return len(p.FieldValidated)
}

func (p *PawnKindDef) Equal(*PawnKindDef) bool {
	return false
}

func (p *PawnKindDef) GetAttributes() attributes.Attributes {
	return p.Attr
}

func (p *PawnKindDef) GetPath() string {
	return ""
}

func (p *PawnKindDef) Greater(*PawnKindDef) bool {
	return false
}

func (p *PawnKindDef) IsValidField(field string) bool {
	return p.FieldValidated[field]
}

func (p *PawnKindDef) Less(*PawnKindDef) bool {
	return false
}

func (p *PawnKindDef) SetAttributes(attr attributes.Attributes) {
	p.Attr = attr
	return
}

func (p *PawnKindDef) Val() *PawnKindDef {
	return nil
}

func (p *PawnKindDef) ValidateField(field string) {
	if p.FieldValidated == nil {
		p.FieldValidated = make(map[string]bool)
	}
	p.FieldValidated[field] = true
	return
}
