// Code generated by rimworld-editor. DO NOT EDIT.

package difficultydefs

import (
	"github.com/cruffinoni/rimworld-editor/xml"
	"github.com/cruffinoni/rimworld-editor/xml/attributes"
)

type DifficultyDef struct {
	Attr           attributes.Attributes
	FieldValidated map[string]bool

	DefName                            string  `xml:"defName"`
	Label                              string  `xml:"label"`
	Description                        string  `xml:"description"`
	Difficulty                         int64   `xml:"difficulty"`
	ThreatScale                        float64 `xml:"threatScale"`
	AllowBigThreats                    bool    `xml:"allowBigThreats"`
	AllowIntroThreats                  bool    `xml:"allowIntroThreats"`
	PeacefulTemples                    bool    `xml:"peacefulTemples"`
	AllowCaveHives                     bool    `xml:"allowCaveHives"`
	AllowViolentQuests                 bool    `xml:"allowViolentQuests"`
	PredatorsHuntHumanlikes            bool    `xml:"predatorsHuntHumanlikes"`
	ColonistMoodOffset                 int64   `xml:"colonistMoodOffset"`
	CropYieldFactor                    float64 `xml:"cropYieldFactor"`
	MineYieldFactor                    float64 `xml:"mineYieldFactor"`
	ResearchSpeedFactor                float64 `xml:"researchSpeedFactor"`
	DiseaseIntervalFactor              float64 `xml:"diseaseIntervalFactor"`
	EnemyReproductionRateFactor        float64 `xml:"enemyReproductionRateFactor"`
	PlayerPawnInfectionChanceFactor    float64 `xml:"playerPawnInfectionChanceFactor"`
	ManhunterChanceOnDamageFactor      float64 `xml:"manhunterChanceOnDamageFactor"`
	DeepDrillInfestationChanceFactor   float64 `xml:"deepDrillInfestationChanceFactor"`
	WastepackInfestationChanceFactor   float64 `xml:"wastepackInfestationChanceFactor"`
	FoodPoisonChanceFactor             float64 `xml:"foodPoisonChanceFactor"`
	MaintenanceCostFactor              int64   `xml:"maintenanceCostFactor"`
	EnemyDeathOnDownedChanceFactor     float64 `xml:"enemyDeathOnDownedChanceFactor"`
	AdaptationGrowthRateFactorOverZero float64 `xml:"adaptationGrowthRateFactorOverZero"`
	ScariaRotChance                    float64 `xml:"scariaRotChance"`
	AllowExtremeWeatherIncidents       bool    `xml:"allowExtremeWeatherIncidents"`
	MinThreatPointsRangeCeiling        int64   `xml:"minThreatPointsRangeCeiling"`
	AdaptationEffectFactor             float64 `xml:"adaptationEffectFactor"`
	TradePriceFactorLoss               float64 `xml:"tradePriceFactorLoss"`
	ButcherYieldFactor                 float64 `xml:"butcherYieldFactor"`
	IsCustom                           bool    `xml:"isCustom"`
}

func (d *DifficultyDef) Assign(*xml.Element) error {
	return nil
}

func (d *DifficultyDef) CountValidatedField() int {
	if d.FieldValidated == nil {
		return 0
	}
	return len(d.FieldValidated)
}

func (d *DifficultyDef) Equal(*DifficultyDef) bool {
	return false
}

func (d *DifficultyDef) GetAttributes() attributes.Attributes {
	return d.Attr
}

func (d *DifficultyDef) GetPath() string {
	return ""
}

func (d *DifficultyDef) Greater(*DifficultyDef) bool {
	return false
}

func (d *DifficultyDef) IsValidField(field string) bool {
	return d.FieldValidated[field]
}

func (d *DifficultyDef) Less(*DifficultyDef) bool {
	return false
}

func (d *DifficultyDef) SetAttributes(attr attributes.Attributes) {
	d.Attr = attr
	return
}

func (d *DifficultyDef) Val() *DifficultyDef {
	return nil
}

func (d *DifficultyDef) ValidateField(field string) {
	if d.FieldValidated == nil {
		d.FieldValidated = make(map[string]bool)
	}
	d.FieldValidated[field] = true
	return
}
