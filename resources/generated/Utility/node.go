// Code generated by rimworld-editor. DO NOT EDIT.

package utility

import (
	"github.com/cruffinoni/rimworld-editor/xml"
	"github.com/cruffinoni/rimworld-editor/xml/attributes"
	"github.com/cruffinoni/rimworld-editor/xml/types"
	"github.com/cruffinoni/rimworld-editor/xml/types/embedded"
)

type Node struct {
	Attr           attributes.Attributes
	FieldValidated map[string]bool

	Name                           string                 `xml:"name"`
	Value                          int64                  `xml:"value"`
	Nodes                          *types.Slice[*Nodes]   `xml:"nodes"`
	AddToList                      string                 `xml:"addToList"`
	AllowPregnant                  bool                   `xml:"allowPregnant"`
	Def                            string                 `xml:"def"`
	ProhibitedTraits               *types.Slice[string]   `xml:"prohibitedTraits"`
	KindDef                        string                 `xml:"kindDef"`
	Faction                        string                 `xml:"faction"`
	BiocodeApparelChance           int64                  `xml:"biocodeApparelChance"`
	BiocodeWeaponChance            int64                  `xml:"biocodeWeaponChance"`
	MustBeCapableOfViolence        bool                   `xml:"mustBeCapableOfViolence"`
	Parms                          *Parms                 `xml:"parms"`
	Label                          *embedded.Type[string] `xml:"label"`
	Text                           *embedded.Type[string] `xml:"text"`
	FilterDeadPawnsFromLookTargets bool                   `xml:"filterDeadPawnsFromLookTargets"`
	LookTargets                    string                 `xml:"lookTargets"`
	ElseNode                       *ElseNode              `xml:"elseNode"`
	SitePartDefs                   string                 `xml:"sitePartDefs"`
}

func (n *Node) Assign(*xml.Element) error {
	return nil
}

func (n *Node) CountValidatedField() int {
	if n.FieldValidated == nil {
		return 0
	}
	return len(n.FieldValidated)
}

func (n *Node) Equal(*Node) bool {
	return false
}

func (n *Node) GetAttributes() attributes.Attributes {
	return n.Attr
}

func (n *Node) GetPath() string {
	return ""
}

func (n *Node) Greater(*Node) bool {
	return false
}

func (n *Node) IsValidField(field string) bool {
	return n.FieldValidated[field]
}

func (n *Node) Less(*Node) bool {
	return false
}

func (n *Node) SetAttributes(attr attributes.Attributes) {
	n.Attr = attr
	return
}

func (n *Node) Val() *Node {
	return nil
}

func (n *Node) ValidateField(field string) {
	if n.FieldValidated == nil {
		n.FieldValidated = make(map[string]bool)
	}
	n.FieldValidated[field] = true
	return
}
