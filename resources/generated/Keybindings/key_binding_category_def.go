// Code generated by rimworld-editor. DO NOT EDIT.

package keybindings

import (
	"github.com/cruffinoni/rimworld-editor/xml"
	"github.com/cruffinoni/rimworld-editor/xml/attributes"
	"github.com/cruffinoni/rimworld-editor/xml/types"
)

type KeyBindingCategoryDef struct {
	Attr           attributes.Attributes
	FieldValidated map[string]bool

	DefName           string               `xml:"defName"`
	Label             string               `xml:"label"`
	Description       string               `xml:"description"`
	IsGameUniversal   bool                 `xml:"isGameUniversal"`
	CheckForConflicts *types.Slice[string] `xml:"checkForConflicts"`
	SelfConflicting   bool                 `xml:"selfConflicting"`
	DevModeOnly       bool                 `xml:"devModeOnly"`
	DefaultKeyCodeA   string               `xml:"defaultKeyCodeA"`
	DefaultKeyCodeB   string               `xml:"defaultKeyCodeB"`
	ExtraConflictTags *types.Slice[string] `xml:"extraConflictTags"`
	Category          string               `xml:"category"`
}

func (k *KeyBindingCategoryDef) Assign(*xml.Element) error {
	return nil
}

func (k *KeyBindingCategoryDef) CountValidatedField() int {
	if k.FieldValidated == nil {
		return 0
	}
	return len(k.FieldValidated)
}

func (k *KeyBindingCategoryDef) Equal(*KeyBindingCategoryDef) bool {
	return false
}

func (k *KeyBindingCategoryDef) GetAttributes() attributes.Attributes {
	return k.Attr
}

func (k *KeyBindingCategoryDef) GetPath() string {
	return ""
}

func (k *KeyBindingCategoryDef) Greater(*KeyBindingCategoryDef) bool {
	return false
}

func (k *KeyBindingCategoryDef) IsValidField(field string) bool {
	return k.FieldValidated[field]
}

func (k *KeyBindingCategoryDef) Less(*KeyBindingCategoryDef) bool {
	return false
}

func (k *KeyBindingCategoryDef) SetAttributes(attr attributes.Attributes) {
	k.Attr = attr
	return
}

func (k *KeyBindingCategoryDef) Val() *KeyBindingCategoryDef {
	return nil
}

func (k *KeyBindingCategoryDef) ValidateField(field string) {
	if k.FieldValidated == nil {
		k.FieldValidated = make(map[string]bool)
	}
	k.FieldValidated[field] = true
	return
}
