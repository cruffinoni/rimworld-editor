// Code generated by rimworld-editor. DO NOT EDIT.

package thoughtdefs

import (
	"github.com/cruffinoni/rimworld-editor/xml"
	"github.com/cruffinoni/rimworld-editor/xml/attributes"
	"github.com/cruffinoni/rimworld-editor/xml/types"
)

type ThoughtDef struct {
	Attr           attributes.Attributes
	FieldValidated map[string]bool

	DefName                              string                `xml:"defName"`
	DurationDays                         float64               `xml:"durationDays"`
	StackLimit                           int64                 `xml:"stackLimit"`
	NullifyingPrecepts                   *types.Slice[string]  `xml:"nullifyingPrecepts"`
	Stages                               *types.Slice[*Stages] `xml:"stages"`
	Icon                                 string                `xml:"icon"`
	ShowBubble                           bool                  `xml:"showBubble"`
	StackedEffectMultiplier              float64               `xml:"stackedEffectMultiplier"`
	DevelopmentalStageFilter             string                `xml:"developmentalStageFilter"`
	NextThought                          string                `xml:"nextThought"`
	DoNotApplyToQuestLodgers             bool                  `xml:"doNotApplyToQuestLodgers"`
	NullifyingTraits                     *types.Slice[string]  `xml:"nullifyingTraits"`
	StackLimitForSameOtherPawn           int64                 `xml:"stackLimitForSameOtherPawn"`
	RequiredTraits                       *types.Slice[string]  `xml:"requiredTraits"`
	ThoughtClass                         string                `xml:"thoughtClass"`
	ValidWhileDespawned                  bool                  `xml:"validWhileDespawned"`
	NullifyingOwnTales                   *types.Slice[string]  `xml:"nullifyingOwnTales"`
	WorkerClass                          string                `xml:"workerClass"`
	TaleDef                              string                `xml:"taleDef"`
	NullifiedIfNotColonist               bool                  `xml:"nullifiedIfNotColonist"`
	EffectMultiplyingStat                string                `xml:"effectMultiplyingStat"`
	GameCondition                        string                `xml:"gameCondition"`
	NullifyingGenes                      *types.Slice[string]  `xml:"nullifyingGenes"`
	NeverNullifyIfAnyTrait               *types.Slice[string]  `xml:"neverNullifyIfAnyTrait"`
	Hediff                               string                `xml:"hediff"`
	RequiredTraitsDegree                 int64                 `xml:"requiredTraitsDegree"`
	Label                                string                `xml:"label"`
	ReplaceThoughts                      *types.Slice[string]  `xml:"replaceThoughts"`
	ThoughtToMake                        string                `xml:"thoughtToMake"`
	MaxCumulatedOpinionOffset            int64                 `xml:"maxCumulatedOpinionOffset"`
	SocialTargetDevelopmentalStageFilter string                `xml:"socialTargetDevelopmentalStageFilter"`
	Invert                               bool                  `xml:"invert"`
}

func (t *ThoughtDef) Assign(*xml.Element) error {
	return nil
}

func (t *ThoughtDef) CountValidatedField() int {
	if t.FieldValidated == nil {
		return 0
	}
	return len(t.FieldValidated)
}

func (t *ThoughtDef) Equal(*ThoughtDef) bool {
	return false
}

func (t *ThoughtDef) GetAttributes() attributes.Attributes {
	return t.Attr
}

func (t *ThoughtDef) GetPath() string {
	return ""
}

func (t *ThoughtDef) Greater(*ThoughtDef) bool {
	return false
}

func (t *ThoughtDef) IsValidField(field string) bool {
	return t.FieldValidated[field]
}

func (t *ThoughtDef) Less(*ThoughtDef) bool {
	return false
}

func (t *ThoughtDef) SetAttributes(attr attributes.Attributes) {
	t.Attr = attr
	return
}

func (t *ThoughtDef) Val() *ThoughtDef {
	return nil
}

func (t *ThoughtDef) ValidateField(field string) {
	if t.FieldValidated == nil {
		t.FieldValidated = make(map[string]bool)
	}
	t.FieldValidated[field] = true
	return
}
