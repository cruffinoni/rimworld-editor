// Code generated by rimworld-editor. DO NOT EDIT.

package damagedefs

import (
	"github.com/cruffinoni/rimworld-editor/xml"
	"github.com/cruffinoni/rimworld-editor/xml/attributes"
	"github.com/cruffinoni/rimworld-editor/xml/types"
)

type DamageDef struct {
	Attr           attributes.Attributes
	FieldValidated map[string]bool

	DefName                                          string                                            `xml:"defName"`
	WorkerClass                                      string                                            `xml:"workerClass"`
	Label                                            string                                            `xml:"label"`
	HasForcefulImpact                                bool                                              `xml:"hasForcefulImpact"`
	MakesBlood                                       bool                                              `xml:"makesBlood"`
	CanInterruptJobs                                 bool                                              `xml:"canInterruptJobs"`
	ExternalViolence                                 bool                                              `xml:"externalViolence"`
	DeathMessage                                     string                                            `xml:"deathMessage"`
	Hediff                                           string                                            `xml:"hediff"`
	ArmorCategory                                    string                                            `xml:"armorCategory"`
	MinDamageToFragment                              int64                                             `xml:"minDamageToFragment"`
	DefaultDamage                                    int64                                             `xml:"defaultDamage"`
	DefaultArmorPenetration                          float64                                           `xml:"defaultArmorPenetration"`
	ExplosionHeatEnergyPerCell                       int64                                             `xml:"explosionHeatEnergyPerCell"`
	ExplosionCellFleck                               string                                            `xml:"explosionCellFleck"`
	ExplosionColorCenter                             string                                            `xml:"explosionColorCenter"`
	ExplosionColorEdge                               string                                            `xml:"explosionColorEdge"`
	SoundExplosion                                   string                                            `xml:"soundExplosion"`
	CombatLogRules                                   string                                            `xml:"combatLogRules"`
	CanUseDeflectMetalEffect                         bool                                              `xml:"canUseDeflectMetalEffect"`
	HarmAllLayersUntilOutside                        bool                                              `xml:"harmAllLayersUntilOutside"`
	HediffSolid                                      string                                            `xml:"hediffSolid"`
	ImpactSoundType                                  string                                            `xml:"impactSoundType"`
	OverkillPctToDestroyPart                         string                                            `xml:"overkillPctToDestroyPart"`
	Execution                                        bool                                              `xml:"execution"`
	HediffSkin                                       string                                            `xml:"hediffSkin"`
	AdditionalHediffs                                *types.Slice[*AdditionalHediffs]                  `xml:"additionalHediffs"`
	BluntStunDuration                                float64                                           `xml:"bluntStunDuration"`
	StabChanceOfForcedInternal                       float64                                           `xml:"stabChanceOfForcedInternal"`
	BluntInnerHitChance                              float64                                           `xml:"bluntInnerHitChance"`
	CutExtraTargetsCurve                             *CutExtraTargetsCurve                             `xml:"cutExtraTargetsCurve"`
	BuildingDamageFactorImpassable                   float64                                           `xml:"buildingDamageFactorImpassable"`
	BluntInnerHitDamageFractionToAdd                 string                                            `xml:"bluntInnerHitDamageFractionToAdd"`
	BluntStunChancePerDamagePctOfCorePartToHeadCurve *BluntStunChancePerDamagePctOfCorePartToHeadCurve `xml:"bluntStunChancePerDamagePctOfCorePartToHeadCurve"`
	BluntStunChancePerDamagePctOfCorePartToBodyCurve *BluntStunChancePerDamagePctOfCorePartToBodyCurve `xml:"bluntStunChancePerDamagePctOfCorePartToBodyCurve"`
	CutCleaveBonus                                   float64                                           `xml:"cutCleaveBonus"`
	BuildingDamageFactor                             float64                                           `xml:"buildingDamageFactor"`
	BluntInnerHitDamageFractionToConvert             string                                            `xml:"bluntInnerHitDamageFractionToConvert"`
	ApplyAdditionalHediffsIfHuntingForFood           bool                                              `xml:"applyAdditionalHediffsIfHuntingForFood"`
	ScratchSplitPercentage                           float64                                           `xml:"scratchSplitPercentage"`
	DamageEffecter                                   string                                            `xml:"damageEffecter"`
	HarmsHealth                                      bool                                              `xml:"harmsHealth"`
	ConsideredHelpful                                bool                                              `xml:"consideredHelpful"`
	IsExplosive                                      bool                                              `xml:"isExplosive"`
	BuildingDamageFactorPassable                     float64                                           `xml:"buildingDamageFactorPassable"`
	DefaultStoppingPower                             float64                                           `xml:"defaultStoppingPower"`
	CorpseDamageFactor                               float64                                           `xml:"corpseDamageFactor"`
	PlantDamageFactor                                int64                                             `xml:"plantDamageFactor"`
	ExplosionAffectOutsidePartsOnly                  bool                                              `xml:"explosionAffectOutsidePartsOnly"`
	IsRanged                                         bool                                              `xml:"isRanged"`
	MakesAnimalsFlee                                 bool                                              `xml:"makesAnimalsFlee"`
	ExternalViolenceForMechanoids                    bool                                              `xml:"externalViolenceForMechanoids"`
	ExplosionInteriorFleck                           string                                            `xml:"explosionInteriorFleck"`
	ExplosionSnowMeltAmount                          int64                                             `xml:"explosionSnowMeltAmount"`
}

func (d *DamageDef) Assign(*xml.Element) error {
	return nil
}

func (d *DamageDef) CountValidatedField() int {
	if d.FieldValidated == nil {
		return 0
	}
	return len(d.FieldValidated)
}

func (d *DamageDef) Equal(*DamageDef) bool {
	return false
}

func (d *DamageDef) GetAttributes() attributes.Attributes {
	return d.Attr
}

func (d *DamageDef) GetPath() string {
	return ""
}

func (d *DamageDef) Greater(*DamageDef) bool {
	return false
}

func (d *DamageDef) IsValidField(field string) bool {
	return d.FieldValidated[field]
}

func (d *DamageDef) Less(*DamageDef) bool {
	return false
}

func (d *DamageDef) SetAttributes(attr attributes.Attributes) {
	d.Attr = attr
	return
}

func (d *DamageDef) Val() *DamageDef {
	return nil
}

func (d *DamageDef) ValidateField(field string) {
	if d.FieldValidated == nil {
		d.FieldValidated = make(map[string]bool)
	}
	d.FieldValidated[field] = true
	return
}
