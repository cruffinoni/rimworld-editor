// Code generated by rimworld-editor. DO NOT EDIT.

package bodies

import (
	"github.com/cruffinoni/rimworld-editor/xml"
	"github.com/cruffinoni/rimworld-editor/xml/attributes"
	"github.com/cruffinoni/rimworld-editor/xml/types"
)

type BodyPartDef struct {
	Attr           attributes.Attributes
	FieldValidated map[string]bool

	DefName                     string                          `xml:"defName"`
	Label                       string                          `xml:"label"`
	HitPoints                   int64                           `xml:"hitPoints"`
	PermanentInjuryChanceFactor int64                           `xml:"permanentInjuryChanceFactor"`
	SkinCovered                 bool                            `xml:"skinCovered"`
	Solid                       bool                            `xml:"solid"`
	BleedRate                   float64                         `xml:"bleedRate"`
	Alive                       bool                            `xml:"alive"`
	Tags                        *types.Slice[string]            `xml:"tags"`
	FrostbiteVulnerability      float64                         `xml:"frostbiteVulnerability"`
	Socketed                    bool                            `xml:"socketed"`
	PawnGeneratorCanAmputate    bool                            `xml:"pawnGeneratorCanAmputate"`
	LabelShort                  string                          `xml:"labelShort"`
	SpawnThingOnRemoved         string                          `xml:"spawnThingOnRemoved"`
	CanSuggestAmputation        bool                            `xml:"canSuggestAmputation"`
	Conceptual                  bool                            `xml:"conceptual"`
	DestroyableByDamage         bool                            `xml:"destroyableByDamage"`
	CanScarify                  bool                            `xml:"canScarify"`
	ForceAlwaysRemovable        bool                            `xml:"forceAlwaysRemovable"`
	BeautyRelated               bool                            `xml:"beautyRelated"`
	Delicate                    bool                            `xml:"delicate"`
	HitChanceFactors            *types.Slice[*HitChanceFactors] `xml:"hitChanceFactors"`
	RemoveRecipeLabelOverride   string                          `xml:"removeRecipeLabelOverride"`
	CorePart                    *CorePart                       `xml:"corePart"`
	ListOrder                   int64                           `xml:"listOrder"`
}

func (b *BodyPartDef) Assign(*xml.Element) error {
	return nil
}

func (b *BodyPartDef) CountValidatedField() int {
	if b.FieldValidated == nil {
		return 0
	}
	return len(b.FieldValidated)
}

func (b *BodyPartDef) Equal(*BodyPartDef) bool {
	return false
}

func (b *BodyPartDef) GetAttributes() attributes.Attributes {
	return b.Attr
}

func (b *BodyPartDef) GetPath() string {
	return ""
}

func (b *BodyPartDef) Greater(*BodyPartDef) bool {
	return false
}

func (b *BodyPartDef) IsValidField(field string) bool {
	return b.FieldValidated[field]
}

func (b *BodyPartDef) Less(*BodyPartDef) bool {
	return false
}

func (b *BodyPartDef) SetAttributes(attr attributes.Attributes) {
	b.Attr = attr
	return
}

func (b *BodyPartDef) Val() *BodyPartDef {
	return nil
}

func (b *BodyPartDef) ValidateField(field string) {
	if b.FieldValidated == nil {
		b.FieldValidated = make(map[string]bool)
	}
	b.FieldValidated[field] = true
	return
}
