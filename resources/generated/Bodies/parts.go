// Code generated by rimworld-editor. DO NOT EDIT.

package bodies

import (
	"github.com/cruffinoni/rimworld-editor/xml"
	"github.com/cruffinoni/rimworld-editor/xml/attributes"
	"github.com/cruffinoni/rimworld-editor/xml/types"
)

type Parts struct {
	Attr           attributes.Attributes
	FieldValidated map[string]bool

	Def         string               `xml:"def"`
	Coverage    float64              `xml:"coverage"`
	Depth       string               `xml:"depth"`
	CustomLabel string               `xml:"customLabel"`
	Height      string               `xml:"height"`
	Parts       *types.Slice[*Parts] `xml:"parts"`
}

func (p *Parts) Assign(*xml.Element) error {
	return nil
}

func (p *Parts) CountValidatedField() int {
	if p.FieldValidated == nil {
		return 0
	}
	return len(p.FieldValidated)
}

func (p *Parts) Equal(*Parts) bool {
	return false
}

func (p *Parts) GetAttributes() attributes.Attributes {
	return p.Attr
}

func (p *Parts) GetPath() string {
	return ""
}

func (p *Parts) Greater(*Parts) bool {
	return false
}

func (p *Parts) IsValidField(field string) bool {
	return p.FieldValidated[field]
}

func (p *Parts) Less(*Parts) bool {
	return false
}

func (p *Parts) SetAttributes(attr attributes.Attributes) {
	p.Attr = attr
	return
}

func (p *Parts) Val() *Parts {
	return nil
}

func (p *Parts) ValidateField(field string) {
	if p.FieldValidated == nil {
		p.FieldValidated = make(map[string]bool)
	}
	p.FieldValidated[field] = true
	return
}
