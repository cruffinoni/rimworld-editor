// Code generated by rimworld-editor. DO NOT EDIT.

package bodyparts

import (
	"github.com/cruffinoni/rimworld-editor/xml"
	"github.com/cruffinoni/rimworld-editor/xml/attributes"
	"github.com/cruffinoni/rimworld-editor/xml/types"
)

type RecipeMaker struct {
	Attr           attributes.Attributes
	FieldValidated map[string]bool

	WorkSpeedStat        string               `xml:"workSpeedStat"`
	WorkSkill            string               `xml:"workSkill"`
	EffectWorking        string               `xml:"effectWorking"`
	SoundWorking         string               `xml:"soundWorking"`
	UnfinishedThingDef   string               `xml:"unfinishedThingDef"`
	SkillRequirements    *SkillRequirements   `xml:"skillRequirements"`
	ResearchPrerequisite string               `xml:"researchPrerequisite"`
	RecipeUsers          *types.Slice[string] `xml:"recipeUsers"`
	DisplayPriority      int64                `xml:"displayPriority"`
}

func (r *RecipeMaker) Assign(*xml.Element) error {
	return nil
}

func (r *RecipeMaker) CountValidatedField() int {
	if r.FieldValidated == nil {
		return 0
	}
	return len(r.FieldValidated)
}

func (r *RecipeMaker) Equal(*RecipeMaker) bool {
	return false
}

func (r *RecipeMaker) GetAttributes() attributes.Attributes {
	return r.Attr
}

func (r *RecipeMaker) GetPath() string {
	return ""
}

func (r *RecipeMaker) Greater(*RecipeMaker) bool {
	return false
}

func (r *RecipeMaker) IsValidField(field string) bool {
	return r.FieldValidated[field]
}

func (r *RecipeMaker) Less(*RecipeMaker) bool {
	return false
}

func (r *RecipeMaker) SetAttributes(attr attributes.Attributes) {
	r.Attr = attr
	return
}

func (r *RecipeMaker) Val() *RecipeMaker {
	return nil
}

func (r *RecipeMaker) ValidateField(field string) {
	if r.FieldValidated == nil {
		r.FieldValidated = make(map[string]bool)
	}
	r.FieldValidated[field] = true
	return
}
