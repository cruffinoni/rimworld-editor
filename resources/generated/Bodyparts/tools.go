// Code generated by rimworld-editor. DO NOT EDIT.

package bodyparts

import (
	"github.com/cruffinoni/rimworld-editor/xml"
	"github.com/cruffinoni/rimworld-editor/xml/attributes"
	"github.com/cruffinoni/rimworld-editor/xml/types"
)

type Tools struct {
	Attr           attributes.Attributes
	FieldValidated map[string]bool

	Label               string               `xml:"label"`
	Capacities          *types.Slice[string] `xml:"capacities"`
	Power               float64              `xml:"power"`
	CooldownTime        int64                `xml:"cooldownTime"`
	SoundMeleeHit       string               `xml:"soundMeleeHit"`
	SoundMeleeMiss      string               `xml:"soundMeleeMiss"`
	AlwaysTreatAsWeapon bool                 `xml:"alwaysTreatAsWeapon"`
}

func (t *Tools) Assign(*xml.Element) error {
	return nil
}

func (t *Tools) CountValidatedField() int {
	if t.FieldValidated == nil {
		return 0
	}
	return len(t.FieldValidated)
}

func (t *Tools) Equal(*Tools) bool {
	return false
}

func (t *Tools) GetAttributes() attributes.Attributes {
	return t.Attr
}

func (t *Tools) GetPath() string {
	return ""
}

func (t *Tools) Greater(*Tools) bool {
	return false
}

func (t *Tools) IsValidField(field string) bool {
	return t.FieldValidated[field]
}

func (t *Tools) Less(*Tools) bool {
	return false
}

func (t *Tools) SetAttributes(attr attributes.Attributes) {
	t.Attr = attr
	return
}

func (t *Tools) Val() *Tools {
	return nil
}

func (t *Tools) ValidateField(field string) {
	if t.FieldValidated == nil {
		t.FieldValidated = make(map[string]bool)
	}
	t.FieldValidated[field] = true
	return
}
