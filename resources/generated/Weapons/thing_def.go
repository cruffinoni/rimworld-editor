// Code generated by rimworld-editor. DO NOT EDIT.

package weapons

import (
	"github.com/cruffinoni/rimworld-editor/xml"
	"github.com/cruffinoni/rimworld-editor/xml/attributes"
	"github.com/cruffinoni/rimworld-editor/xml/types"
)

type ThingDef struct {
	Attr           attributes.Attributes
	FieldValidated map[string]bool

	TechLevel                string               `xml:"techLevel"`
	WeaponTags               *types.Slice[string] `xml:"weaponTags"`
	TradeTags                *types.Slice[string] `xml:"tradeTags"`
	WeaponClasses            *types.Slice[string] `xml:"weaponClasses"`
	ThingCategories          *types.Slice[string] `xml:"thingCategories"`
	BurnableByRecipe         bool                 `xml:"burnableByRecipe"`
	Comps                    *types.Slice[*Comps] `xml:"comps"`
	RelicChance              int64                `xml:"relicChance"`
	RecipeMaker              *RecipeMaker         `xml:"recipeMaker"`
	Category                 string               `xml:"category"`
	TickerType               string               `xml:"tickerType"`
	AltitudeLayer            string               `xml:"altitudeLayer"`
	ThingClass               string               `xml:"thingClass"`
	Label                    string               `xml:"label"`
	UseHitPoints             bool                 `xml:"useHitPoints"`
	NeverMultiSelect         bool                 `xml:"neverMultiSelect"`
	GraphicData              *GraphicData         `xml:"graphicData"`
	DefName                  string               `xml:"defName"`
	Description              string               `xml:"description"`
	PossessionCount          int64                `xml:"possessionCount"`
	SoundInteract            string               `xml:"soundInteract"`
	CostList                 *CostList            `xml:"costList"`
	StatBases                *StatBases           `xml:"statBases"`
	Verbs                    *types.Slice[*Verbs] `xml:"verbs"`
	Tools                    *types.Slice[*Tools] `xml:"tools"`
	RotateInShelves          bool                 `xml:"rotateInShelves"`
	Projectile               *Projectile          `xml:"projectile"`
	ThingSetMakerTags        *types.Slice[string] `xml:"thingSetMakerTags"`
	Tradeability             string               `xml:"tradeability"`
	DestroyOnDrop            bool                 `xml:"destroyOnDrop"`
	UiIconScale              float64              `xml:"uiIconScale"`
	StuffCategories          *types.Slice[string] `xml:"stuffCategories"`
	CostStuffCount           int64                `xml:"costStuffCount"`
	EquippedAngleOffset      int64                `xml:"equippedAngleOffset"`
	EquippedStatOffsets      *EquippedStatOffsets `xml:"equippedStatOffsets"`
	GenerateCommonality      float64              `xml:"generateCommonality"`
	RequiresFactionToAcquire string               `xml:"requiresFactionToAcquire"`
	Apparel                  *Apparel             `xml:"apparel"`
	Selectable               bool                 `xml:"selectable"`
	InspectorTabs            *types.Slice[string] `xml:"inspectorTabs"`
	DrawerType               string               `xml:"drawerType"`
	DrawGuioverlay           bool                 `xml:"drawGUIOverlay"`
	AllowedArchonexusCount   int64                `xml:"allowedArchonexusCount"`
	PathCost                 int64                `xml:"pathCost"`
	Smeltable                bool                 `xml:"smeltable"`
	EquipmentType            string               `xml:"equipmentType"`
	AlwaysHaulable           bool                 `xml:"alwaysHaulable"`
	MeleeHitSound            string               `xml:"meleeHitSound"`
	NotifyMapRemoved         bool                 `xml:"notifyMapRemoved"`
	TradeNeverStack          bool                 `xml:"tradeNeverStack"`
}

func (t *ThingDef) Assign(*xml.Element) error {
	return nil
}

func (t *ThingDef) CountValidatedField() int {
	if t.FieldValidated == nil {
		return 0
	}
	return len(t.FieldValidated)
}

func (t *ThingDef) Equal(*ThingDef) bool {
	return false
}

func (t *ThingDef) GetAttributes() attributes.Attributes {
	return t.Attr
}

func (t *ThingDef) GetPath() string {
	return ""
}

func (t *ThingDef) Greater(*ThingDef) bool {
	return false
}

func (t *ThingDef) IsValidField(field string) bool {
	return t.FieldValidated[field]
}

func (t *ThingDef) Less(*ThingDef) bool {
	return false
}

func (t *ThingDef) SetAttributes(attr attributes.Attributes) {
	t.Attr = attr
	return
}

func (t *ThingDef) Val() *ThingDef {
	return nil
}

func (t *ThingDef) ValidateField(field string) {
	if t.FieldValidated == nil {
		t.FieldValidated = make(map[string]bool)
	}
	t.FieldValidated[field] = true
	return
}
