// Code generated by rimworld-editor. DO NOT EDIT.

package weapons

import (
	"github.com/cruffinoni/rimworld-editor/xml"
	"github.com/cruffinoni/rimworld-editor/xml/attributes"
	"github.com/cruffinoni/rimworld-editor/xml/types"
)

type Comps struct {
	Attr           attributes.Attributes
	FieldValidated map[string]bool

	CompClass                   string               `xml:"compClass"`
	WorkSpeedStat               string               `xml:"workSpeedStat"`
	WorkSkill                   string               `xml:"workSkill"`
	RecipeUsers                 *types.Slice[string] `xml:"recipeUsers"`
	EffectWorking               string               `xml:"effectWorking"`
	SoundWorking                string               `xml:"soundWorking"`
	UnfinishedThingDef          string               `xml:"unfinishedThingDef"`
	MaxCharges                  int64                `xml:"maxCharges"`
	HotKey                      string               `xml:"hotKey"`
	ChargeNoun                  string               `xml:"chargeNoun"`
	DestroyOnEmpty              bool                 `xml:"destroyOnEmpty"`
	DisplayGizmoWhileUndrafted  bool                 `xml:"displayGizmoWhileUndrafted"`
	Li                          *types.Slice[string] `xml:"li"`
	OnGroundRandomRotateAngle   int64                `xml:"onGroundRandomRotateAngle"`
	NameMaker                   string               `xml:"nameMaker"`
	DescriptionMaker            string               `xml:"descriptionMaker"`
	MinQualityForArtistic       string               `xml:"minQualityForArtistic"`
	ExplosiveRadius             float64              `xml:"explosiveRadius"`
	ExplosiveDamageType         string               `xml:"explosiveDamageType"`
	RequiredDamageTypeToExplode string               `xml:"requiredDamageTypeToExplode"`
	BiocodeOnEquip              bool                 `xml:"biocodeOnEquip"`
}

func (c *Comps) Assign(*xml.Element) error {
	return nil
}

func (c *Comps) CountValidatedField() int {
	if c.FieldValidated == nil {
		return 0
	}
	return len(c.FieldValidated)
}

func (c *Comps) Equal(*Comps) bool {
	return false
}

func (c *Comps) GetAttributes() attributes.Attributes {
	return c.Attr
}

func (c *Comps) GetPath() string {
	return ""
}

func (c *Comps) Greater(*Comps) bool {
	return false
}

func (c *Comps) IsValidField(field string) bool {
	return c.FieldValidated[field]
}

func (c *Comps) Less(*Comps) bool {
	return false
}

func (c *Comps) SetAttributes(attr attributes.Attributes) {
	c.Attr = attr
	return
}

func (c *Comps) Val() *Comps {
	return nil
}

func (c *Comps) ValidateField(field string) {
	if c.FieldValidated == nil {
		c.FieldValidated = make(map[string]bool)
	}
	c.FieldValidated[field] = true
	return
}
