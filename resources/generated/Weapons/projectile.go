// Code generated by rimworld-editor. DO NOT EDIT.

package weapons

import (
	"github.com/cruffinoni/rimworld-editor/xml"
	"github.com/cruffinoni/rimworld-editor/xml/attributes"
)

type Projectile struct {
	Attr           attributes.Attributes
	FieldValidated map[string]bool

	DamageDef                 string  `xml:"damageDef"`
	DamageAmountBase          int64   `xml:"damageAmountBase"`
	Speed                     int64   `xml:"speed"`
	StoppingPower             float64 `xml:"stoppingPower"`
	ArmorPenetrationBase      float64 `xml:"armorPenetrationBase"`
	ExplosionRadius           float64 `xml:"explosionRadius"`
	SoundExplode              string  `xml:"soundExplode"`
	AiIsIncendiary            bool    `xml:"ai_IsIncendiary"`
	ArcHeightFactor           float64 `xml:"arcHeightFactor"`
	ShadowSize                float64 `xml:"shadowSize"`
	ScreenShakeFactor         float64 `xml:"screenShakeFactor"`
	PostExplosionGasType      string  `xml:"postExplosionGasType"`
	PreExplosionSpawnChance   float64 `xml:"preExplosionSpawnChance"`
	PreExplosionSpawnThingDef string  `xml:"preExplosionSpawnThingDef"`
	ExplosionDelay            int64   `xml:"explosionDelay"`
}

func (p *Projectile) Assign(*xml.Element) error {
	return nil
}

func (p *Projectile) CountValidatedField() int {
	if p.FieldValidated == nil {
		return 0
	}
	return len(p.FieldValidated)
}

func (p *Projectile) Equal(*Projectile) bool {
	return false
}

func (p *Projectile) GetAttributes() attributes.Attributes {
	return p.Attr
}

func (p *Projectile) GetPath() string {
	return ""
}

func (p *Projectile) Greater(*Projectile) bool {
	return false
}

func (p *Projectile) IsValidField(field string) bool {
	return p.FieldValidated[field]
}

func (p *Projectile) Less(*Projectile) bool {
	return false
}

func (p *Projectile) SetAttributes(attr attributes.Attributes) {
	p.Attr = attr
	return
}

func (p *Projectile) Val() *Projectile {
	return nil
}

func (p *Projectile) ValidateField(field string) {
	if p.FieldValidated == nil {
		p.FieldValidated = make(map[string]bool)
	}
	p.FieldValidated[field] = true
	return
}
