// Code generated by rimworld-editor. DO NOT EDIT.

package weapons

import (
	"github.com/cruffinoni/rimworld-editor/xml"
	"github.com/cruffinoni/rimworld-editor/xml/attributes"
	"github.com/cruffinoni/rimworld-editor/xml/types"
	"github.com/cruffinoni/rimworld-editor/xml/types/primary"
)

type Verbs struct {
	Attr           attributes.Attributes
	FieldValidated map[string]bool

	VerbClass                   string                       `xml:"verbClass"`
	HasStandardCommand          bool                         `xml:"hasStandardCommand"`
	DefaultProjectile           string                       `xml:"defaultProjectile"`
	WarmupTime                  float64                      `xml:"warmupTime"`
	Range                       float64                      `xml:"range"`
	SoundCast                   string                       `xml:"soundCast"`
	RangedFireRulepack          string                       `xml:"rangedFireRulepack"`
	TargetParams                *TargetParams                `xml:"targetParams"`
	SoundCastTail               string                       `xml:"soundCastTail"`
	ForcedMissRadius            float64                      `xml:"forcedMissRadius"`
	Power                       float64                      `xml:"power"`
	AiIsBuildingDestroyer       bool                         `xml:"ai_IsBuildingDestroyer"`
	Label                       string                       `xml:"label"`
	CooldownTime                float64                      `xml:"cooldownTime"`
	MuzzleFlashScale            int64                        `xml:"muzzleFlashScale"`
	NoiseRadius                 int64                        `xml:"noiseRadius"`
	Capacities                  *types.Slice[string]         `xml:"capacities"`
	TicksBetweenBurstShots      int64                        `xml:"ticksBetweenBurstShots"`
	BurstShotCount              int64                        `xml:"burstShotCount"`
	AiAvoidFriendlyFireRadius   int64                        `xml:"ai_AvoidFriendlyFireRadius"`
	OnlyManualCast              bool                         `xml:"onlyManualCast"`
	SoundAiming                 string                       `xml:"soundAiming"`
	SpawnDef                    string                       `xml:"spawnDef"`
	ColonyWideTaleDef           string                       `xml:"colonyWideTaleDef"`
	ExplosiveDamageType         string                       `xml:"explosiveDamageType"`
	RequiredDamageTypeToExplode string                       `xml:"requiredDamageTypeToExplode"`
	ExplosiveRadius             float64                      `xml:"explosiveRadius"`
	Li                          *types.Slice[*primary.Empty] `xml:"li"`
	StopBurstWithoutLos         bool                         `xml:"stopBurstWithoutLos"`
}

func (v *Verbs) Assign(*xml.Element) error {
	return nil
}

func (v *Verbs) CountValidatedField() int {
	if v.FieldValidated == nil {
		return 0
	}
	return len(v.FieldValidated)
}

func (v *Verbs) Equal(*Verbs) bool {
	return false
}

func (v *Verbs) GetAttributes() attributes.Attributes {
	return v.Attr
}

func (v *Verbs) GetPath() string {
	return ""
}

func (v *Verbs) Greater(*Verbs) bool {
	return false
}

func (v *Verbs) IsValidField(field string) bool {
	return v.FieldValidated[field]
}

func (v *Verbs) Less(*Verbs) bool {
	return false
}

func (v *Verbs) SetAttributes(attr attributes.Attributes) {
	v.Attr = attr
	return
}

func (v *Verbs) Val() *Verbs {
	return nil
}

func (v *Verbs) ValidateField(field string) {
	if v.FieldValidated == nil {
		v.FieldValidated = make(map[string]bool)
	}
	v.FieldValidated[field] = true
	return
}
