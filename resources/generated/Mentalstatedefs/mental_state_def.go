// Code generated by rimworld-editor. DO NOT EDIT.

package mentalstatedefs

import (
	"github.com/cruffinoni/rimworld-editor/xml"
	"github.com/cruffinoni/rimworld-editor/xml/attributes"
	"github.com/cruffinoni/rimworld-editor/xml/types"
)

type MentalStateDef struct {
	Attr           attributes.Attributes
	FieldValidated map[string]bool

	MinTicksBeforeRecovery           int64                `xml:"minTicksBeforeRecovery"`
	RecoveryMtbDays                  float64              `xml:"recoveryMtbDays"`
	StateClass                       string               `xml:"stateClass"`
	Label                            string               `xml:"label"`
	BeginLetterDef                   string               `xml:"beginLetterDef"`
	RecoveryMessage                  string               `xml:"recoveryMessage"`
	InCaravanCanDo                   bool                 `xml:"inCaravanCanDo"`
	DefName                          string               `xml:"defName"`
	MoodRecoveryThought              string               `xml:"moodRecoveryThought"`
	NameColor                        string               `xml:"nameColor"`
	MaxTicksBeforeRecovery           int64                `xml:"maxTicksBeforeRecovery"`
	BaseInspectLine                  string               `xml:"baseInspectLine"`
	Category                         string               `xml:"category"`
	BlockInteractionInitiationExcept *types.Slice[string] `xml:"blockInteractionInitiationExcept"`
	BlockInteractionRecipientExcept  *types.Slice[string] `xml:"blockInteractionRecipientExcept"`
	BlockRandomInteraction           bool                 `xml:"blockRandomInteraction"`
	BeginLetter                      string               `xml:"beginLetter"`
	StateEffecter                    string               `xml:"stateEffecter"`
	BlockNormalThoughts              bool                 `xml:"blockNormalThoughts"`
	Tale                             string               `xml:"tale"`
	RecoverFromSleep                 bool                 `xml:"recoverFromSleep"`
	PrisonersCanDo                   bool                 `xml:"prisonersCanDo"`
	ColonistsOnly                    bool                 `xml:"colonistsOnly"`
	IgnoreDrugPolicy                 bool                 `xml:"ignoreDrugPolicy"`
	DrugCategory                     string               `xml:"drugCategory"`
	WorkerClass                      string               `xml:"workerClass"`
	AllowBeatfire                    bool                 `xml:"allowBeatfire"`
	BeginLetterLabel                 string               `xml:"beginLetterLabel"`
	EscapingPrisonersIgnore          bool                 `xml:"escapingPrisonersIgnore"`
	SlavesCanDo                      bool                 `xml:"slavesCanDo"`
	RequiredCapacities               *types.Slice[string] `xml:"requiredCapacities"`
	SlavesOnly                       bool                 `xml:"slavesOnly"`
	AllowGuilty                      bool                 `xml:"allowGuilty"`
	RecoverFromCollapsingExhausted   bool                 `xml:"recoverFromCollapsingExhausted"`
	RecoverFromDowned                bool                 `xml:"recoverFromDowned"`
}

func (m *MentalStateDef) Assign(*xml.Element) error {
	return nil
}

func (m *MentalStateDef) CountValidatedField() int {
	if m.FieldValidated == nil {
		return 0
	}
	return len(m.FieldValidated)
}

func (m *MentalStateDef) Equal(*MentalStateDef) bool {
	return false
}

func (m *MentalStateDef) GetAttributes() attributes.Attributes {
	return m.Attr
}

func (m *MentalStateDef) GetPath() string {
	return ""
}

func (m *MentalStateDef) Greater(*MentalStateDef) bool {
	return false
}

func (m *MentalStateDef) IsValidField(field string) bool {
	return m.FieldValidated[field]
}

func (m *MentalStateDef) Less(*MentalStateDef) bool {
	return false
}

func (m *MentalStateDef) SetAttributes(attr attributes.Attributes) {
	m.Attr = attr
	return
}

func (m *MentalStateDef) Val() *MentalStateDef {
	return nil
}

func (m *MentalStateDef) ValidateField(field string) {
	if m.FieldValidated == nil {
		m.FieldValidated = make(map[string]bool)
	}
	m.FieldValidated[field] = true
	return
}
